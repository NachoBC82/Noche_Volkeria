// main global script file
int speed = 0;
// called when the game starts, before the first room is loaded
function game_start()
{
  // Auto-save on the save slot 999
  SetRestartPoint();
  Game.SpeechFont = eFontFont3;
  Game.NormalFont = eFontFont3;
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
}

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  if (IsGamePaused())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyTab)
  {
    if(!gDiario.Visible){
      gDiario.Visible = true;
    }else{
      gDiario.Visible = false;
    }
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    QuitGame(1);
  }
  else if (keycode == eKeyF9)
  {
    // F9 will restart the game
    RestartGame();
  }
  else if (keycode == eKeyF5)
  {
    gSave.Visible = true;
    SaveGameSlot(1, "Guardado rápido");
    Wait(10);
    gSave.Visible = false;
  }
  else if (keycode == eKeyF8)
  {
    RestoreGameSlot(1);
  }
  else if (keycode == eKeyEscape)
  {
    if(!gPause.Visible){
      gPause.Visible = true;
    }else{
      gPause.Visible = false;
    }
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (IsGamePaused())
  {
    // game is paused, so do nothing (i.e. don't process mouse clicks)
  }
  else if (button == eMouseLeft)
  {
    // left-click, so try using the current mouse cursor mode at this position
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode);
  }
  else if (button == eMouseRight)
  {
    // right-click, so cycle the mouse cursor mode
    mouse.SelectNextMode();
  }
}

function cChar1_Talk(Character *theCharacter, CursorMode mode)
{
  cCharacter.Walk(281, 174, eBlock, eWalkableAreas);
  if(puerta_archivos_abierta == true)
  {
    dInquisidorAyuda.Start();
  } else {
    entradaArchivos.Start();
    obj2.Visible = true;
    aEscribir.Play();
  }
}

function Button5_OnClick(GUIControl *control, MouseButton button)
{
  if (GUI_inventario.Visible == true)
    GUI_inventario.Visible = false;
  else
    GUI_inventario.Visible = true;
}

function iInvEspejo_Look()
{
  cCharacter.Say("El espejo de mi madre ...");
  Wait(5);
  cCharacter.Say("Mamá... Papá... Encontraré a vuestro asesino");
}


function iInvManual_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Parece un manual, cubierto de tierra... pero intacto.");
  Wait(1);
  cCharacter.Say("Un libro bastante antiguo, pero parece haber sido utilizado hace poco");
  Wait(1);
  cCharacter.Say("Veamos qué dice...");

  Wait(2);
  cCharacter.Say("\"El saber yace oculto entre líneas y sombras... sólo el verdadero buscador descifrará el camino.\"");
  Wait(2);
  cCharacter.Say("\"Cuando el conocimiento duerme en el papel y el tiempo lo envuelve...\"");
  Wait(2);
  cCharacter.Say("\"...solo el vínculo entre lo escrito y lo olvidado despertará el poder arcano.\"");

  Wait(2);
  cCharacter.Say("¿Lo escrito y lo olvidado...? ¿Un libro y un pergamino?");
  Wait(2);
  cCharacter.Say("\"Busca el tomo de letras firmes y el pergamino de trazo ancestral. Únelos, y el grimorio nacerá.\"");

  Wait(2);
  cCharacter.Say("Esto se está poniendo interesante...");
  Wait(1);
  cCharacter.Say("\"Mas no basta con saber. Se requiere esencia.\"");
  Wait(2);
  cCharacter.Say("\"Aquello que ha muerto y aquello que lo dio caza deben fundirse bajo la llama del alquimista.\"");

  Wait(2);
  cCharacter.Say("¿Cenizas de un vampiro... y un crucifijo de cazador?");
  Wait(2);
  cCharacter.Say("\"Reúne las cenizas del inmortal caído y el símbolo de su perseguidor: el crucifijo del cazador. De la unión surgirá el cristal de esencia vampírica.\"");

  Wait(2);
  cCharacter.Say("Esto parece una receta de magia prohibida...");
  Wait(1);
  cCharacter.Say("\"El grimorio sin alma es solo papel. Une la esencia y el saber, y nacerá el arte perdido: la llave mística.\"");
  Wait(2);
  cCharacter.Say("\"Con ella, abre lo sellado. La caja que oculta el destino... y el objeto que todo lo cambia.\"");

  Wait(3);
  cCharacter.Say("Parece que este manual no es solo un libro viejo...");
}

function iInvLibro_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Las páginas están gastadas, pero algunas parecen... recién pasadas.");
}

function iInvPergamino_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Este pergamino está lleno de runas. Siento un leve cosquilleo al mirarlo demasiado tiempo.");
}

function iInvGrimorio_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Ahora sí... esto ya no es solo papel. Puedo sentir que guarda poder.");
}

function iInvCenizas_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Estas cenizas no son comunes... hay algo en su color, como si todavía contuvieran vida.");
}

function iInvCrucifijo_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Este crucifijo... no es solo fe. Está grabado con símbolos alquímicos.");
}

function iInvCristal_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Este cristal late... como si tuviera un corazón. Es inquietante.");
}

function iInvGrimorioMagico_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Con esto... esa maldita caja fuerte no se me podrá resistir.");
}

function iInvArchivo_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Esto es justo lo que necesito para poder atrapar a ese malnacido.");
}
function iInvLibro_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    case iInvPergamino:
      cCharacter.Say("Al unir el libro con el pergamino, las palabras parecen reordenarse solas...");
      cCharacter.AddInventory(iInvGrimorio);
      cCharacter.LoseInventory(iInvLibro);
      cCharacter.LoseInventory(iInvPergamino);
    break;
    
    default:
      cCharacter.Say("No tiene sentido juntar estas cosas");
    break;
  }
}

function iInvPergamino_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    case iInvLibro:
      cCharacter.Say("Al unir el libro con el pergamino, las palabras parecen reordenarse solas...");
      cCharacter.AddInventory(iInvGrimorio);
      cCharacter.LoseInventory(iInvLibro);
      cCharacter.LoseInventory(iInvPergamino);
    break;
    
    default:
      cCharacter.Say("No sé para que me podría servir unirlo con el pergamino");
    break;
  }
}

function iInvCenizas_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    case iInvCrucifijo:
      cCharacter.Say("Al unir las cenizas con el crucifijo, algo oscuro y antiguo está cobrando forma...");
      cCharacter.AddInventory(iInvCristal);
      cCharacter.LoseInventory(iInvCenizas);
      cCharacter.LoseInventory(iInvCrucifijo);
    break;
    
    default:
      cCharacter.Say("¿Qué utilidad tendría eso?");
    break;
  }
}

function iInvCrucifijo_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    case iInvCenizas:
      cCharacter.Say("Al unir las cenizas con el crucifijo, algo oscuro y antiguo está cobrando forma...");
      cCharacter.AddInventory(iInvCristal);
      cCharacter.LoseInventory(iInvCenizas);
      cCharacter.LoseInventory(iInvCrucifijo);
    break;
    
    default:
      cCharacter.Say("Eso simplemente sería una perdida de tiempo");
    break;
  }
}

function iInvGrimorio_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    case iInvCristal:
      cCharacter.Say("Al insertar el cristal en el grimorio, los símbolos brillan... como si por fin estuviera completo.");
      cCharacter.AddInventory(iInvGrimorioMagico);
      cCharacter.LoseInventory(iInvCristal);
      cCharacter.LoseInventory(iInvGrimorio);
    break;
    
    default:
      cCharacter.Say("Parece demasiado importante para que lo use con eso");
    break;
  }
}

function iInvCristal_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    case iInvGrimorio:
      cCharacter.Say("Al insertar el cristal en el grimorio, los símbolos brillan... como si por fin estuviera completo.");
      cCharacter.AddInventory(iInvGrimorioMagico);
      cCharacter.LoseInventory(iInvCristal);
      cCharacter.LoseInventory(iInvGrimorio);
    break;
    
    default:
      cCharacter.Say("No le encuentro ninguna utilidad");
    break;
  }
}

function iInvEspejo_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    default:
      cCharacter.Say("No tiene sentido usarlo con el espejo de mi difunta madre");
    break;
  }
}

function iInvManual_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    default:
      cCharacter.Say("Parece que esto no sirve para nada, excepto para leer");
    break;
  }
}

function iInvCarta_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    default:
      cCharacter.Say("No creo que pueda hacer algo juntando estas cosas");
    break;
  }
}

function iInvArchivo_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    default:
      cCharacter.Say("No parece que pueda sacar nada útil de esto");
    break;
  }
}

function iInvGrimorioMagico_UseInv(InventoryItem *theItem, CursorMode mode)
{
  switch(cCharacter.ActiveInventory)
  {
    default:
      cCharacter.Say("Ya parece que este completo, no creo que necesite nada más");
    break;
  }
}

function cInquisidor_UseInv(Character *theCharacter, CursorMode mode)
{
  cCharacter.Walk(284, 164, eBlock, eWalkableAreas);
  if(puerta_archivos_abierta == true)
  {
    switch(cCharacter.ActiveInventory)
    {    
      case iInvArchivo:    
        dFinDelJuego.Start();
        cCharacter.ChangeRoom(4, 140, 156, eDirectionRight);
        
      break;
      
      default:
        cInquisidor.Say("¿Para que necesitaría eso? Lárgate.");
      break;
    }
  } else {
    switch(cCharacter.ActiveInventory)
    {    
      case iInvCarta:    
        dAbrirRoom.Start();
        cCharacter.LoseInventory(iInvCarta);
      break;
      
      default:
        cInquisidor.Say("¿Para que necesitaría eso? Lárgate.");
      break;
    }
  }
}

function bExit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

function bSave_OnClick(GUIControl *control, MouseButton button)
{
    gSave.Visible = true;
    SaveGameSlot(1, "Guardado rápido");
    Wait(10);
    gSave.Visible = false;
}
function dialog_request(int param)
{

}

function iInvCarta_Look(InventoryItem *theItem, CursorMode mode)
{
  cCharacter.Say("Veamos que dice la carta.");
  cCharacter.SpeechColor = 64520;
  Wait(1);
  cCharacter.Say("'Padre, la enfermedad está empeorando y no puedo más.'");
  Wait(2);
  cCharacter.Say("'Nos debemos rendir ya que nadie ha encontrado el castillo del barón Vlad.'");
  Wait(2);
  cCharacter.Say("'La cura de esta maldición se encuentra allí, así que no podemos hacer más.'");
  cCharacter.SpeechColor = 63488;
  Wait(2);
  cCharacter.Say("¿El castillo? Creo que ya se como convencer a Hector.");
}
